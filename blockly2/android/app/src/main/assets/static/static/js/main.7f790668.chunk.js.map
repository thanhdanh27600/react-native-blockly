{"version":3,"sources":["useBlocklyWorkspace.js","debounce.jsx","BlocklyWorkspace.jsx","initContent/content.jsx","App.js","serviceWorker.js","index.js"],"names":["useBlocklyWorkspace","ref","initialXml","toolboxConfiguration","workspaceConfiguration","onWorkspaceChange","onImportXmlError","onInject","onDispose","React","useState","workspace","setWorkspace","xml","setXml","didInitialImport","setDidInitialImport","didHandleNewWorkspace","setDidHandleNewWorkspace","workspaceConfigurationRef","useRef","useEffect","current","toolboxConfigurationRef","updateToolbox","onInjectRef","onDisposeRef","handleWorkspaceChanged","useCallback","newWorkspace","Blockly","inject","toolbox","onDisposeFunction","dispose","listener","addChangeListener","removeChangeListener","func","wait","timeout","later","args","clearTimeout","setTimeout","debounce","newXml","Xml","domToText","workspaceToDom","callback","cancel","domToWorkspace","textToDom","e","importFromXml","BlocklyWorkspace","className","onXmlChange","editorDiv","onXmlChangeRef","defaultProps","ConfigFiles","INITIAL_XML","INITIAL_TOOLBOX_XML","INITIAL_TOOLBOX_JSON","kind","contents","name","colour","type","blockxml","custom","INITIAL_TOOLBOX_CATEGORIES","blocks","values","TIMES","shadow","fields","NUM","statements","DO","TEXT","App","thang","Blocks","init","this","jsonInit","Python","block","getFieldValue","trai","phai","registerButtonCallback","alert","console","log","code","workspaceToCode","grid","spacing","length","snap","zoom","controls","wheel","startScale","maxScale","minScale","scaleSpeed","pinch","Boolean","window","location","hostname","match","addEventListener","editor","createElement","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f790668.chunk.js","sourcesContent":["import React from \"react\";\nimport Blockly from \"blockly\";\n\nimport debounce from \"./debounce\";\n\nfunction importFromXml(xml, workspace, onImportXmlError) {\n  try {\n    Blockly.Xml.domToWorkspace(Blockly.Xml.textToDom(xml), workspace);\n    return true;\n  } catch (e) {\n    if (onImportXmlError) {\n      onImportXmlError(e);\n    }\n    return false;\n  }\n}\n\nconst useBlocklyWorkspace = ({\n  ref,\n  initialXml,\n  toolboxConfiguration,\n  workspaceConfiguration,\n  onWorkspaceChange,\n  onImportXmlError,\n  onInject,\n  onDispose,\n}) => {\n  const [workspace, setWorkspace] = React.useState(null);\n  const [xml, setXml] = React.useState(initialXml);\n  const [didInitialImport, setDidInitialImport] = React.useState(false);\n  const [didHandleNewWorkspace, setDidHandleNewWorkspace] =\n    React.useState(false);\n\n  // we explicitly don't want to recreate the workspace when the configuration changes\n  // so, we'll keep it in a ref and update as necessary in an effect hook\n  const workspaceConfigurationRef = React.useRef(workspaceConfiguration);\n  React.useEffect(() => {\n    workspaceConfigurationRef.current = workspaceConfiguration;\n  }, [workspaceConfiguration]);\n\n  const toolboxConfigurationRef = React.useRef(toolboxConfiguration);\n  React.useEffect(() => {\n    toolboxConfigurationRef.current = toolboxConfiguration;\n    if (toolboxConfiguration && workspace) {\n      workspace.updateToolbox(toolboxConfiguration);\n    }\n  }, [toolboxConfiguration, workspace]);\n\n  const onInjectRef = React.useRef(onInject);\n  const onDisposeRef = React.useRef(onDispose);\n  React.useEffect(() => {\n    onInjectRef.current = onInject;\n  }, [onInject]);\n  React.useEffect(() => {\n    onDisposeRef.current = onDispose;\n  }, [onDispose]);\n\n  const handleWorkspaceChanged = React.useCallback(\n    (newWorkspace) => {\n      if (onWorkspaceChange) {\n        onWorkspaceChange(newWorkspace);\n      }\n    },\n    [onWorkspaceChange]\n  );\n\n  // Workspace creation\n  React.useEffect(() => {\n    const newWorkspace = Blockly.inject(ref.current, {\n      ...workspaceConfigurationRef.current,\n      toolbox: toolboxConfigurationRef.current,\n    });\n    setWorkspace(newWorkspace);\n    setDidInitialImport(false); // force a re-import if we recreate the workspace\n    setDidHandleNewWorkspace(false); // Singal that a workspace change event needs to be sent.\n\n    if (onInjectRef.current) {\n      onInjectRef.current(newWorkspace);\n    }\n\n    const onDisposeFunction = onDisposeRef.current;\n\n    // Dispose of the workspace when our div ref goes away (Equivalent to didComponentUnmount)\n    return () => {\n      newWorkspace.dispose();\n\n      if (onDisposeFunction) {\n        onDisposeFunction(newWorkspace);\n      }\n    };\n  }, [ref]);\n\n  // Send a workspace change event when the workspace is created\n  React.useEffect(() => {\n    if (workspace && !didHandleNewWorkspace) {\n      handleWorkspaceChanged(workspace);\n    }\n  }, [handleWorkspaceChanged, didHandleNewWorkspace, workspace]);\n\n  // Workspace change listener\n  React.useEffect(() => {\n    if (workspace == null) {\n      return undefined;\n    }\n\n    const listener = () => {\n      handleWorkspaceChanged(workspace);\n    };\n    workspace.addChangeListener(listener);\n    return () => {\n      workspace.removeChangeListener(listener);\n    };\n  }, [workspace, handleWorkspaceChanged]);\n\n  // xmlDidChange callback\n  React.useEffect(() => {\n    if (workspace == null) {\n      return undefined;\n    }\n\n    const [callback, cancel] = debounce(() => {\n      const newXml = Blockly.Xml.domToText(\n        Blockly.Xml.workspaceToDom(workspace)\n      );\n      if (newXml === xml) {\n        return;\n      }\n\n      setXml(newXml);\n    }, 200);\n\n    workspace.addChangeListener(callback);\n\n    return () => {\n      workspace.removeChangeListener(callback);\n      cancel();\n    };\n  }, [workspace, xml]);\n\n  // Initial Xml Changes\n  React.useEffect(() => {\n    if (xml && workspace && !didInitialImport) {\n      const success = importFromXml(xml, workspace, onImportXmlError);\n      if (!success) {\n        setXml(null);\n      }\n      setDidInitialImport(true);\n    }\n  }, [xml, workspace, didInitialImport, onImportXmlError]);\n\n  return { workspace, xml };\n};\n\nexport default useBlocklyWorkspace;\n","export default function debounce(func, wait) {\n  let timeout = null;\n  let later = null;\n\n  const debouncedFunction = (...args) => {\n    later = () => {\n      timeout = null;\n      func(...args);\n    };\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n  };\n\n  const cancel = () => {\n    if (timeout !== null) {\n      clearTimeout(timeout);\n      later();\n    }\n  };\n\n  return [debouncedFunction, cancel];\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useBlocklyWorkspace from \"./useBlocklyWorkspace\";\n\nconst propTypes = {\n  initialXml: PropTypes.string,\n  toolboxConfiguration: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n  workspaceConfiguration: PropTypes.object, // eslint-disable-line react/forbid-prop-types\n  className: PropTypes.string,\n  onWorkspaceChange: PropTypes.func,\n  onImportXmlError: PropTypes.func,\n  onXmlChange: PropTypes.func,\n  onInject: PropTypes.func,\n  onDispose: PropTypes.func,\n};\n\nconst defaultProps = {\n  initialXml: null,\n  toolboxConfiguration: null,\n  workspaceConfiguration: null,\n  className: null,\n  onWorkspaceChange: null,\n  onImportXmlError: null,\n  onXmlChange: null,\n  onInject: null,\n  onDispose: null,\n};\n\nfunction BlocklyWorkspace({\n  initialXml,\n  toolboxConfiguration,\n  workspaceConfiguration,\n  className,\n  onWorkspaceChange,\n  onXmlChange,\n  onImportXmlError,\n  onInject,\n  onDispose,\n}) {\n  const editorDiv = React.useRef(null);\n  const { xml } = useBlocklyWorkspace({\n    ref: editorDiv,\n    initialXml,\n    toolboxConfiguration,\n    workspaceConfiguration,\n    onWorkspaceChange,\n    onImportXmlError,\n    onInject,\n    onDispose,\n  });\n  const onXmlChangeRef = React.useRef(onXmlChange);\n  React.useEffect(() => {\n    onXmlChangeRef.current = onXmlChange;\n  }, [onXmlChange]);\n  React.useEffect(() => {\n    if (onXmlChangeRef.current && xml) {\n      onXmlChangeRef.current(xml);\n    }\n  }, [xml]);\n\n  return <div className={className} ref={editorDiv} />;\n}\n\nBlocklyWorkspace.propTypes = propTypes;\nBlocklyWorkspace.defaultProps = defaultProps;\n\nexport default BlocklyWorkspace;\n","const INITIAL_XML =\n  '<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"controls_whileUntil\" id=\"L{5skzh{.8+YNyc-Z*5D\" x=\"350\" y=\"70\"><field name=\"MODE\">WHILE</field></block></xml>';\n\nconst INITIAL_TOOLBOX_JSON = {\n  kind: \"categoryToolbox\",\n  contents: [\n    {\n      kind: \"category\",\n      name: \"Logic\",\n      colour: 210,\n      contents: [\n        {\n          kind: \"block\",\n          type: \"controls_if\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '<block type=\"logic_compare\"><field name=\"OP\">EQ</field></block>',\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '<block type=\"logic_operation\"><field name=\"OP\">AND</field></block>',\n        },\n        {\n          kind: \"block\",\n          type: \"logic_negate\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '<block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block>',\n        },\n        {\n          kind: \"block\",\n          type: \"logic_null\",\n        },\n        {\n          kind: \"block\",\n          type: \"logic_ternary\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Loops\",\n      colour: 120,\n      contents: [\n        {\n          kind: \"block\",\n          blockxml:\n            '<block type=\"controls_repeat_ext\">\\n' +\n            '      <value name=\"TIMES\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">10</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"controls_whileUntil\">\\n' +\n            '      <field name=\"MODE\">WHILE</field>\\n' +\n            \"    </block>\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"controls_for\">\\n' +\n            '      <field name=\"VAR\" id=\"C(8;cYCF}~vSgkxzJ+{O\" variabletype=\"\">i</field>\\n' +\n            '      <value name=\"FROM\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">1</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"TO\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">10</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"BY\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">1</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"controls_forEach\">\\n' +\n            '      <field name=\"VAR\" id=\"Cg!CSk/ZJo2XQN3=VVrz\" variabletype=\"\">j</field>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"controls_flow_statements\">\\n' +\n            '      <field name=\"FLOW\">BREAK</field>\\n' +\n            \"    </block>\\n\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Math\",\n      colour: 230,\n      contents: [\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_round\">\\n' +\n            '      <field name=\"OP\">ROUND</field>\\n' +\n            '      <value name=\"NUM\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">3.1</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_number\">\\n' +\n            '      <field name=\"NUM\">0</field>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_single\">\\n' +\n            '      <field name=\"OP\">ROOT</field>\\n' +\n            '      <value name=\"NUM\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">9</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_trig\">\\n' +\n            '      <field name=\"OP\">SIN</field>\\n' +\n            '      <value name=\"NUM\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">45</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_constant\">\\n' +\n            '      <field name=\"CONSTANT\">PI</field>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_number_property\">\\n' +\n            '      <mutation divisor_input=\"false\"></mutation>\\n' +\n            '      <field name=\"PROPERTY\">EVEN</field>\\n' +\n            '      <value name=\"NUMBER_TO_CHECK\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">0</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_arithmetic\">\\n' +\n            '      <field name=\"OP\">ADD</field>\\n' +\n            '      <value name=\"A\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">1</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"B\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">1</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_on_list\">\\n' +\n            '      <mutation op=\"SUM\"></mutation>\\n' +\n            '      <field name=\"OP\">SUM</field>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_modulo\">\\n' +\n            '      <value name=\"DIVIDEND\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">64</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"DIVISOR\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">10</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_constrain\">\\n' +\n            '      <value name=\"VALUE\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">50</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"LOW\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">1</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"HIGH\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">100</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"math_random_int\">\\n' +\n            '      <value name=\"FROM\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">1</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"TO\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">100</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          type: \"math_random_float\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Text\",\n      colour: 160,\n      contents: [\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_charAt\">\\n' +\n            '      <mutation at=\"true\"></mutation>\\n' +\n            '      <field name=\"WHERE\">FROM_START</field>\\n' +\n            '      <value name=\"VALUE\">\\n' +\n            '        <block type=\"variables_get\">\\n' +\n            '          <field name=\"VAR\" id=\"q@$ZF(L?Zo/z`d{o.Bp!\" variabletype=\"\">text</field>\\n' +\n            \"        </block>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text\">\\n' +\n            '      <field name=\"TEXT\"></field>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_append\">\\n' +\n            '      <field name=\"VAR\" id=\":};P,s[*|I8+L^-.EbRi\" variabletype=\"\">item</field>\\n' +\n            '      <value name=\"TEXT\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\"></field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_length\">\\n' +\n            '      <value name=\"VALUE\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\">abc</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_isEmpty\">\\n' +\n            '      <value name=\"VALUE\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\"></field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_indexOf\">\\n' +\n            '      <field name=\"END\">FIRST</field>\\n' +\n            '      <value name=\"VALUE\">\\n' +\n            '        <block type=\"variables_get\">\\n' +\n            '          <field name=\"VAR\" id=\"q@$ZF(L?Zo/z`d{o.Bp!\" variabletype=\"\">text</field>\\n' +\n            \"        </block>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"FIND\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\">abc</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_join\">\\n' +\n            '      <mutation items=\"2\"></mutation>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_getSubstring\">\\n' +\n            '      <mutation at1=\"true\" at2=\"true\"></mutation>\\n' +\n            '      <field name=\"WHERE1\">FROM_START</field>\\n' +\n            '      <field name=\"WHERE2\">FROM_START</field>\\n' +\n            '      <value name=\"STRING\">\\n' +\n            '        <block type=\"variables_get\">\\n' +\n            '          <field name=\"VAR\" id=\"q@$ZF(L?Zo/z`d{o.Bp!\" variabletype=\"\">text</field>\\n' +\n            \"        </block>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_changeCase\">\\n' +\n            '      <field name=\"CASE\">UPPERCASE</field>\\n' +\n            '      <value name=\"TEXT\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\">abc</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_trim\">\\n' +\n            '      <field name=\"MODE\">BOTH</field>\\n' +\n            '      <value name=\"TEXT\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\">abc</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_print\">\\n' +\n            '      <value name=\"TEXT\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\">abc</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"text_prompt_ext\">\\n' +\n            '      <mutation type=\"TEXT\"></mutation>\\n' +\n            '      <field name=\"TYPE\">TEXT</field>\\n' +\n            '      <value name=\"TEXT\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\">abc</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Lists\",\n      colour: 259,\n      contents: [\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_indexOf\">\\n' +\n            '      <field name=\"END\">FIRST</field>\\n' +\n            '      <value name=\"VALUE\">\\n' +\n            '        <block type=\"variables_get\">\\n' +\n            '          <field name=\"VAR\" id=\"e`(L;x,.j[[XN`F33Q5.\" variabletype=\"\">list</field>\\n' +\n            \"        </block>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_create_with\">\\n' +\n            '      <mutation items=\"0\"></mutation>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_repeat\">\\n' +\n            '      <value name=\"NUM\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">5</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          type: \"lists_length\",\n        },\n        {\n          kind: \"block\",\n          type: \"lists_isEmpty\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_create_with\">\\n' +\n            '      <mutation items=\"3\"></mutation>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_getIndex\">\\n' +\n            '      <mutation statement=\"false\" at=\"true\"></mutation>\\n' +\n            '      <field name=\"MODE\">GET</field>\\n' +\n            '      <field name=\"WHERE\">FROM_START</field>\\n' +\n            '      <value name=\"VALUE\">\\n' +\n            '        <block type=\"variables_get\">\\n' +\n            '          <field name=\"VAR\" id=\"e`(L;x,.j[[XN`F33Q5.\" variabletype=\"\">list</field>\\n' +\n            \"        </block>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_setIndex\">\\n' +\n            '      <mutation at=\"true\"></mutation>\\n' +\n            '      <field name=\"MODE\">SET</field>\\n' +\n            '      <field name=\"WHERE\">FROM_START</field>\\n' +\n            '      <value name=\"LIST\">\\n' +\n            '        <block type=\"variables_get\">\\n' +\n            '          <field name=\"VAR\" id=\"e`(L;x,.j[[XN`F33Q5.\" variabletype=\"\">list</field>\\n' +\n            \"        </block>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_getSublist\">\\n' +\n            '      <mutation at1=\"true\" at2=\"true\"></mutation>\\n' +\n            '      <field name=\"WHERE1\">FROM_START</field>\\n' +\n            '      <field name=\"WHERE2\">FROM_START</field>\\n' +\n            '      <value name=\"LIST\">\\n' +\n            '        <block type=\"variables_get\">\\n' +\n            '          <field name=\"VAR\" id=\"e`(L;x,.j[[XN`F33Q5.\" variabletype=\"\">list</field>\\n' +\n            \"        </block>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_split\">\\n' +\n            '      <mutation mode=\"SPLIT\"></mutation>\\n' +\n            '      <field name=\"MODE\">SPLIT</field>\\n' +\n            '      <value name=\"DELIM\">\\n' +\n            '        <shadow type=\"text\">\\n' +\n            '          <field name=\"TEXT\">,</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"lists_sort\">\\n' +\n            '      <field name=\"TYPE\">NUMERIC</field>\\n' +\n            '      <field name=\"DIRECTION\">1</field>\\n' +\n            \"    </block>\\n\",\n        },\n      ],\n    },\n    {\n      kind: \"category\",\n      name: \"Colour\",\n      colour: 19,\n      contents: [\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"colour_picker\">\\n' +\n            '      <field name=\"COLOUR\">#ff0000</field>\\n' +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          type: \"colour_random\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"colour_rgb\">\\n' +\n            '      <value name=\"RED\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">100</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"GREEN\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">50</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"BLUE\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">0</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '    <block type=\"colour_blend\">\\n' +\n            '      <value name=\"COLOUR1\">\\n' +\n            '        <shadow type=\"colour_picker\">\\n' +\n            '          <field name=\"COLOUR\">#ff0000</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"COLOUR2\">\\n' +\n            '        <shadow type=\"colour_picker\">\\n' +\n            '          <field name=\"COLOUR\">#3333ff</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            '      <value name=\"RATIO\">\\n' +\n            '        <shadow type=\"math_number\">\\n' +\n            '          <field name=\"NUM\">0.5</field>\\n' +\n            \"        </shadow>\\n\" +\n            \"      </value>\\n\" +\n            \"    </block>\\n\",\n        },\n      ],\n    },\n    { kind: \"sep\" },\n    {\n      kind: \"category\",\n      name: \"Variables\",\n      custom: \"VARIABLE\",\n      colour: 330,\n    },\n    {\n      kind: \"category\",\n      name: \"Functions\",\n      custom: \"PROCEDURE\",\n      colour: 290,\n    },\n    { kind: \"sep\" },\n    {\n      kind: \"category\",\n      name: \"Nhóm chuyển động\",\n      colour: 19,\n      contents: [\n        {\n          kind: \"block\",\n          blockxml:\n            '<block type=\"thang\"><field name=\"THANG\">5</field></block>',\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '<block type=\"trai\"><field name=\"TRAI\">5</field></block>',\n        },\n        {\n          kind: \"block\",\n          blockxml:\n            '<block type=\"phai\"><field name=\"PHAI\">5</field></block>',\n        },\n      ],\n    },\n  ],\n};\n\nconst INITIAL_TOOLBOX_XML = '';\n\nconst INITIAL_TOOLBOX_CATEGORIES = [\n  {\n    name: \"Controls\",\n    blocks: [\n      { type: \"controls_if\" },\n      {\n        type: \"controls_repeat_ext\",\n        values: {\n          TIMES: {\n            type: \"math_number\",\n            shadow: true,\n            fields: {\n              NUM: 10,\n            },\n          },\n        },\n        statements: {\n          DO: {\n            type: \"text_print\",\n            shadow: true,\n            values: {\n              TEXT: {\n                type: \"text\",\n                shadow: true,\n                fields: {\n                  TEXT: \"abc\",\n                },\n              },\n            },\n          },\n        },\n      },\n    ],\n  },\n  {\n    name: \"Text\",\n    blocks: [\n      { type: \"text\" },\n      {\n        type: \"text_print\",\n        values: {\n          TEXT: {\n            type: \"text\",\n            shadow: true,\n            fields: {\n              TEXT: \"abc\",\n            },\n          },\n        },\n      },\n    ],\n  },\n];\n\nconst ConfigFiles = {\n  INITIAL_XML,\n  INITIAL_TOOLBOX_XML,\n  INITIAL_TOOLBOX_JSON,\n  INITIAL_TOOLBOX_CATEGORIES,\n};\n\nexport default ConfigFiles;\n","/* eslint-disable import/no-extraneous-dependencies */\n\nimport React from \"react\";\nimport Blockly from \"blockly\";\nimport \"blockly/python\";\n\nimport { BlocklyWorkspace } from \"./index-workspace\";\nimport ConfigFiles from \"./initContent/content\";\n\n\nconst App = () => {\n  const [toolboxConfiguration, setToolboxConfiguration] = React.useState(\n    ConfigFiles.INITIAL_TOOLBOX_JSON\n  );\n\n  React.useEffect(() => {\n    // window.setTimeout(() => {\n    //   setToolboxConfiguration((prevConfig) => ({\n    //     ...prevConfig,\n    //     contents: [\n    //       ...prevConfig.contents,\n    //       {\n    //         kind: \"category\",\n    //         name: \"Them vao sau 2 giay\",\n    //         contents: [\n    //           { kind: \"block\", type: \"text\" },\n              \n    //         ],\n    //         colour:100\n    //       },\n    //     ],\n    //   }));\n    // }, 2000);\n\n    // window.setTimeout(() => {\n    //   setToolboxConfiguration((prevConfig) => ({\n    //     ...prevConfig,\n    //     contents: [\n    //       ...prevConfig.contents.slice(0, prevConfig.contents.length - 1),\n    //     ],\n    //   }));\n    // }, 4000);\n\n\n  //CUSTOM GIU THANG\n    const thang = {\n      \"type\": \"thang\",\n      \"message0\": \"Giữ thẳng %1 %2 giây\",\n      \"args0\": [\n        {\n          \"type\": \"input_dummy\"\n        },\n        {\n          \"type\": \"field_number\",\n          \"name\": \"THANG\",\n          \"value\": 5,\n          \"precision\": 0.1\n        }\n      ],\n      \"inputsInline\": true,\n      \"previousStatement\": null,\n      \"nextStatement\": null,\n      \"colour\": 0,\n      \"tooltip\": \"Giữ đai sắt thẳng trong ... giây, độ chính xác 0.1s\",\n      \"helpUrl\": \"\"\n    }\n    Blockly.Blocks['thang'] = {\n      init: function () {\n        this.jsonInit(thang);\n        // Assign 'this' to a variable for use in the tooltip closure below.\n      }\n    };\n\n    Blockly.Python['thang'] = function (block) {\n      var number_thang = block.getFieldValue('THANG');\n      // TODO: Assemble JavaScript into code variable.\n      var code = 'diThang(' + number_thang +')\\n';\n      return code;\n    };\n\n\n    //CUSTOM UON TRAI\n    const trai = {\n      \"type\": \"trai\",\n      \"message0\": \"Uốn trái %1 %2 giây\",\n      \"args0\": [\n        {\n          \"type\": \"input_dummy\"\n        },\n        {\n          \"type\": \"field_number\",\n          \"name\": \"TRAI\",\n          \"value\": 5,\n          \"precision\": 0.1\n        }\n      ],\n      \"inputsInline\": true,\n      \"previousStatement\": null,\n      \"nextStatement\": null,\n      \"colour\": 0,\n      \"tooltip\": \"Uốn trái đai sắt trong ... giây, độ chính xác 0.1s\",\n      \"helpUrl\": \"\"\n    }\n    Blockly.Blocks['trai'] = {\n      init: function () {\n        this.jsonInit(trai);\n        // Assign 'this' to a variable for use in the tooltip closure below.\n      }\n    };\n\n    Blockly.Python['trai'] = function (block) {\n      var number_trai = block.getFieldValue('TRAI');\n      // TODO: Assemble JavaScript into code variable.\n      var code = 'uonTrai(' + number_trai +')\\n';\n      return code;\n    };\n\n\n    //CUSTOM UON PHAI\n    const phai = {\n      \"type\": \"phai\",\n      \"message0\": \"Uốn phải %1 %2 giây\",\n      \"args0\": [\n        {\n          \"type\": \"input_dummy\"\n        },\n        {\n          \"type\": \"field_number\",\n          \"name\": \"PHAI\",\n          \"value\": 5,\n          \"precision\": 0.1\n        }\n      ],\n      \"inputsInline\": true,\n      \"previousStatement\": null,\n      \"nextStatement\": null,\n      \"colour\": 0,\n      \"tooltip\": \"Uốn phải đai sắt trong ... giây, độ chính xác 0.1s\",\n      \"helpUrl\": \"\"\n    }\n    Blockly.Blocks['phai'] = {\n      init: function () {\n        this.jsonInit(phai);\n        // Assign 'this' to a variable for use in the tooltip closure below.\n      }\n    };\n\n    Blockly.Python['phai'] = function (block) {\n      var number_trai = block.getFieldValue('PHAI');\n      // TODO: Assemble JavaScript into code variable.\n      var code = 'uonTrai(' + number_trai +')\\n';\n      return code;\n    };\n\n\n  }, []);\n\n  const onWorkspaceChange = React.useCallback((workspace) => {\n    workspace.registerButtonCallback(\"myFirstButtonPressed\", () => {\n      alert(\"button is pressed\");\n    });\n    const newXml = Blockly.Xml.domToText(Blockly.Xml.workspaceToDom(workspace));\n    console.log(\"XML workspace:\",newXml);\n\n    const code = Blockly.Python.workspaceToCode(workspace);\n    console.log(\"CODE:\", code);\n  }, []);\n\n  const onXmlChange = React.useCallback((newXml) => {\n    console.log(\"XML change:\",newXml);\n  }, []);\n\n  return (\n    <BlocklyWorkspace\n      toolboxConfiguration={toolboxConfiguration}\n      workspaceConfiguration={{\n        grid: {\n          spacing: 20,\n          length: 3,\n          colour: \"#ccc\",\n          snap: true,\n        },\n        zoom:\n        {\n          controls: true,\n          wheel: true,\n          startScale: 1.0,\n          maxScale: 3,\n          minScale: 0.3,\n          scaleSpeed: 1.2,\n          pinch: true\n        }\n      }}\n      initialXml={ConfigFiles.INITIAL_XML}\n      className=\"fill-height\"\n      onWorkspaceChange={onWorkspaceChange}\n      onXmlChange={onXmlChange}\n    />\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nwindow.addEventListener(\"load\", () => {\n    const editor = React.createElement(App);\n    ReactDOM.render(editor, document.getElementById(\"root\"));\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}